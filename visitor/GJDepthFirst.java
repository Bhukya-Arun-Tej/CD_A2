//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public int storing=1;

   public class ClassEntry{
      String ClassName;
      String ParentClass;
      HashMap <String, String> Variables;
      HashMap <String, MethodEntry> Methods;

      ClassEntry(){
         ParentClass=null;
         Variables = new HashMap <String,String> ();
         Methods = new HashMap < String, MethodEntry> ();
      } 
   }

   public class MethodEntry{
      String MethodName;
      String ReturnType;
      HashMap <String, String> Parameters;
      HashMap <String, String> Variables;

      MethodEntry(){
         Parameters = new HashMap< String,String>();
         Variables = new HashMap< String, String> ();
      }
   }

   public HashMap<String, ClassEntry> ClassTable;


   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      if(storing == 1){
         System.err.println("Debug stmt: Started storing the types");
         ClassTable = new HashMap<String,ClassEntry>();
         R _ret=null;
         n.f0.accept(this, (A) ClassTable);
         n.f1.accept(this, (A) ClassTable);
         n.f2.accept(this, (A) ClassTable);

         System.out.println("\n\n\n\n printing Types map \n\n\n\n");
         // Iterate through the ClassTable
for (Map.Entry<String, ClassEntry> classEntry : ClassTable.entrySet()) {
    String className = classEntry.getKey();
    ClassEntry classInfo = classEntry.getValue();

    System.out.println("Class: " + className);
    System.out.println("Variables:");
    for (Map.Entry<String, String> variableEntry : classInfo.Variables.entrySet()) {
        String varName = variableEntry.getKey();
        String varType = variableEntry.getValue();
        System.out.println("- " + varName + ": " + varType);
    }

    System.out.println("Methods:");
    for (Map.Entry<String, MethodEntry> methodEntry : classInfo.Methods.entrySet()) {
        String methodName = methodEntry.getKey();
        MethodEntry methodInfo = methodEntry.getValue();

        System.out.println("- Method: " + methodName);
        System.out.println("  Return Type: " + methodInfo.ReturnType);

        System.out.println("  Parameters:");
        for (Map.Entry<String, String> paramEntry : methodInfo.Parameters.entrySet()) {
            String paramName = paramEntry.getKey();
            String paramType = paramEntry.getValue();
            System.out.println("  - " + paramName + ": " + paramType);
        }

        System.out.println("  Local Variables:");
        for (Map.Entry<String, String> localVarEntry : methodInfo.Variables.entrySet()) {
            String localVarName = localVarEntry.getKey();
            String localVarType = localVarEntry.getValue();
            System.out.println("  - " + localVarName + ": " + localVarType);
        }
    }
}


         return _ret;
      }
      else{
         R _ret=null;
         n.f0.accept(this, (A) ClassTable);
         n.f1.accept(this, (A) ClassTable);
         n.f2.accept(this, (A) ClassTable);
         System.out.println("Program type-checked successfully");
         

         return _ret;
      }
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> PrintStatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public R visit(MainClass n, A argu) {
      if(storing==1){
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         HashMap<String,ClassEntry> temp = (HashMap<String,ClassEntry>)argu;
         String classname= n.f1.f0.toString();
         if(temp.get(classname)!=null){
            System.out.println("Type error"); 
            System.exit(0);
         }
         temp.put(classname, new ClassEntry());
         ClassEntry tempclass= temp.get(classname);
         tempclass.ClassName=classname;
         

         HashMap<String, MethodEntry> methodmap = tempclass.Methods;
         MethodEntry tempmethod= new MethodEntry();
         tempmethod.MethodName = "main";
         tempmethod.ReturnType= null;
         tempmethod.Parameters.put(n.f11.f0.toString(), "String[]");
         methodmap.put("main",tempmethod);


         // System.err.println("checking: "+classname);
         // ClassTable.put(classname,)
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         n.f5.accept(this, argu);
         n.f6.accept(this, argu);
         n.f7.accept(this, argu);
         n.f8.accept(this, argu);
         n.f9.accept(this, argu);
         n.f10.accept(this, argu);
         n.f11.accept(this, argu);
         n.f12.accept(this, argu);
         n.f13.accept(this, argu);
         n.f14.accept(this, argu);
         n.f15.accept(this, argu);
         n.f16.accept(this, argu);
         return _ret;
         
      }
      else{
         R _ret=null;
         n.f0.accept(this, argu);
         System.out.println(n.f1.f0.toString());
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         n.f5.accept(this, argu);
         n.f6.accept(this, argu);
         n.f7.accept(this, argu);
         n.f8.accept(this, argu);
         n.f9.accept(this, argu);
         n.f10.accept(this, argu);
         n.f11.accept(this, argu);
         n.f12.accept(this, argu);
         n.f13.accept(this, argu);
         n.f14.accept(this, argu);
         n.f15.accept(this, argu);
         n.f16.accept(this, argu);
         return _ret;
         

      }
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n, A argu) {
      if(storing==1){
         R _ret=null;
         
         n.f0.accept(this, argu);
         return _ret;

      }
      else{
         R _ret=null;
         n.f0.accept(this, argu);
         return _ret;

      }
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public R visit(ClassDeclaration n, A argu) {
      if(storing == 1){
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         
         String classname= n.f1.f0.toString();
          if(ClassTable.get(classname)!=null){
            System.out.println("Type error"); 
            System.exit(0);
         }
         ClassTable.put(classname, new ClassEntry());
         ClassEntry tempclass= ClassTable.get(classname);
         tempclass.ClassName=classname;
      //   System.err.println("Checking keys in ClassTable------------");
      //  for (String key : ClassTable.keySet()) {
      //       System.err.println("Key: " + key);
      //   }
         // HashMap<String,ClassEntry> temp = (HashMap<String,ClassEntry>)argu;
         
         n.f2.accept(this, argu);
         n.f3.accept(this, (A) (ClassTable.get(classname)).Variables);
         n.f4.accept(this, (A) (ClassTable.get(classname)).Methods);
         n.f5.accept(this, argu);
         return _ret;
      }
      else{
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         n.f5.accept(this, argu);
         return _ret;
      }
      
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public R visit(ClassExtendsDeclaration n, A argu) {

      if(storing==1){
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         String classname= n.f1.f0.toString();
         if(ClassTable.get(classname)!=null){
            System.out.println("Type error"); 
            System.exit(0);
         }
         ClassTable.put(classname, new ClassEntry());
         ClassEntry tempclass= ClassTable.get(classname);
         tempclass.ClassName=classname;

         
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         n.f5.accept(this, (A) (ClassTable.get(classname)).Variables);
         n.f6.accept(this, (A) (ClassTable.get(classname)).Methods);
         n.f7.accept(this, argu);
         return _ret;
      }
      else{
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         n.f5.accept(this, argu);
         n.f6.accept(this, argu);
         n.f7.accept(this, argu);
         return _ret;         
      }
      
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(VarDeclaration n, A argu) {
      HashMap<String,String> temp = (HashMap<String,String>)argu;
      if(storing ==1 ){
         R _ret=null;
         // String type=n.f0.toString();
         String type = (String )n.f0.accept(this, argu);
         String id = (String )n.f1.accept(this, argu);
         // String id = n.f1.f0.toString();
         // System.err.println("type is : "+ type);
         // System.err.println("identifier  is : "+ id);
         if(temp.get(id)!=null){
            System.out.println("Type error"); 
            System.exit(0);
         }
         temp.put(id,type);
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         return _ret;
      }
      else{
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         return _ret;
      }
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public R visit(MethodDeclaration n, A argu) {
      HashMap<String,MethodEntry> temp = (HashMap<String,MethodEntry>) argu;

      if(storing==1){

         R _ret=null;
         n.f0.accept(this, argu);
         
         String type=(String) n.f1.accept(this, argu);
         String id=(String) n.f2.accept(this,argu);


         if (temp.get(id) != null)
         {
            System.out.println("Type error"); 
            System.exit(0);
         }
         temp.put(id,new MethodEntry());
         MethodEntry tempmethod= temp.get(id);

         tempmethod.MethodName = id;
         tempmethod.ReturnType= type;

         n.f3.accept(this, argu);
         n.f4.accept(this, (A) (temp.get(id)).Parameters);
         n.f5.accept(this, argu);
         n.f6.accept(this, argu);
         n.f7.accept(this, (A)(temp.get(id)).Variables);
         n.f8.accept(this, argu);
         n.f9.accept(this, argu);
         n.f10.accept(this, argu);
         n.f11.accept(this, argu);
         n.f12.accept(this, argu);
         return _ret;
      }
      else{
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         n.f5.accept(this, argu);
         n.f6.accept(this, argu);
         n.f7.accept(this, argu);
         n.f8.accept(this, argu);
         n.f9.accept(this, argu);
         n.f10.accept(this, argu);
         n.f11.accept(this, argu);
         n.f12.accept(this, argu);
         return _ret;   
      }
      
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public R visit(FormalParameter n, A argu) {
      HashMap<String,String> temp= (HashMap<String,String>) argu;
      if(storing==1){
         R _ret=null;
         String type = (String)n.f0.accept(this, argu);
         String id = (String)n.f1.accept(this, argu);
          if (temp.get(id) != null){
            System.out.println("Type error"); 
            System.exit(0);
         }
         temp.put(id,type);
         return _ret;   
      }
      else{
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         return _ret;
      }
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public R visit(FormalParameterRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public R visit(Type n, A argu) {
      R _ret=n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n, A argu) {
      R _ret=(R) "int[]";
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n, A argu) {
      R _ret=(R)"boolean";
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n, A argu) {
      R _ret=(R)"int";
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | DoStatement()
    *       | PrintStatement()
    */
   public R visit(Statement n, A argu) {//no changes
      if(storing == 0){
         R _ret=null;
         n.f0.accept(this, argu);
         return _ret;
      }
      else{
         R _ret=null;
         n.f0.accept(this, argu);
         return _ret;
      }
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n, A argu) {//no changes
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public R visit(AssignmentStatement n, A argu) {
      if(storing == 1){
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         return _ret;
      }
      else{//check type here
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         return _ret;
      }
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public R visit(ArrayAssignmentStatement n, A argu) {
      if(storing == 1){
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         n.f5.accept(this, argu);
         n.f6.accept(this, argu);
         return _ret;         
      }
      else{//check type here
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         n.f5.accept(this, argu);
         n.f6.accept(this, argu);
         return _ret;         
      }
   }

   /**
    * f0 -> IfthenElseStatement()
    *       | IfthenStatement()
    */
   public R visit(IfStatement n, A argu) {//no changes
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(IfthenStatement n, A argu) {
      if(storing == 1){
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         return _ret;         
      }
      else{//check here
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         return _ret;          
      }
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfthenElseStatement n, A argu) {
      if(storing == 1 ){
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         n.f5.accept(this, argu);
         n.f6.accept(this, argu);
         return _ret;
         
      }
      else{//check here
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         n.f5.accept(this, argu);
         n.f6.accept(this, argu);
         return _ret;
      }
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n, A argu) {
      if(storing ==1 ){
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         return _ret;

      }
      else{//check here
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         return _ret;
      }
   }

   /**
    * f0 -> "do"
    * f1 -> Statement()
    * f2 -> "while"
    * f3 -> "("
    * f4 -> Expression()
    * f5 -> ")"
    * f6 -> ";"
    */
   public R visit(DoStatement n, A argu) {
      if(storing ==1 ){
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         n.f5.accept(this, argu);
         n.f6.accept(this, argu);
         return _ret;

      }
      else{//check here
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         n.f5.accept(this, argu);
         n.f6.accept(this, argu);
         return _ret;

      }
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n, A argu) {
      if(storing ==1 ){
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         return _ret;
      }
      else{//check here
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         return _ret;

      }
   }

   /**
    * f0 -> OrExpression()
    *       | AndExpression()
    *       | CompareExpression()
    *       | neqExpression()
    *       | AddExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | DivExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | PrimaryExpression()
    */
   public R visit(Expression n, A argu) {
      if(storing ==1 ){
         R _ret=null;
         n.f0.accept(this, argu);
         return _ret;
      }
      else{
         R _ret=n.f0.accept(this, argu);
         return _ret;
      }
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&&"
    * f2 -> PrimaryExpression()
    */
   public R visit(AndExpression n, A argu) {
      if(storing ==1 ){
         R _ret=null;   
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         return _ret;         
      }
      else{//check here
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         return _ret;
      }
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "||"
    * f2 -> PrimaryExpression()
    */
   public R visit(OrExpression n, A argu) {
      if(storing ==1 ){
         R _ret=null;   
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         return _ret;         
      }
      else{//check here
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         return _ret;
      }
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<="
    * f2 -> PrimaryExpression()
    */
   public R visit(CompareExpression n, A argu) {
      if(storing ==1 ){
         R _ret=null;   
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         return _ret;         
      }
      else{//check here
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         return _ret;
      }
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "!="
    * f2 -> PrimaryExpression()
    */
   public R visit(neqExpression n, A argu) {
      if(storing ==1 ){
         R _ret=null;   
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         return _ret;         
      }
      else{//check here
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         return _ret;
      }
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public R visit(AddExpression n, A argu) {
      if(storing ==1 ){
         R _ret=null;   
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         return _ret;         
      }
      else{//check here
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         return _ret;
      }
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public R visit(MinusExpression n, A argu) {
      if(storing ==1 ){
         R _ret=null;   
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         return _ret;         
      }
      else{//check here
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         return _ret;
      }
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public R visit(TimesExpression n, A argu) {
      if(storing ==1 ){
         R _ret=null;   
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         return _ret;         
      }
      else{//check here
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         return _ret;
      }
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "/"
    * f2 -> PrimaryExpression()
    */
   public R visit(DivExpression n, A argu) {
      if(storing ==1 ){
         R _ret=null;   
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         return _ret;         
      }
      else{//check here
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         return _ret;
      }
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public R visit(ArrayLookup n, A argu) {
      if(storing ==1 ){
         R _ret=null;   
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         return _ret;         
      }
      else{//check here
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         return _ret;
      }
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public R visit(ArrayLength n, A argu) {
      if(storing ==1 ){
         R _ret=null;   
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         return _ret;         
      }
      else{//check here
         R _ret=(R)"int";
         String type = "int[]";
         if(!type.equals(n.f0.accept(this, argu))){
            System.out.println("Type Error");
            System.exit(0);
         }
         
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         return _ret;
      }
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   public R visit(MessageSend n, A argu) {
     if(storing ==1 ){
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         n.f5.accept(this, argu);
         return _ret;
     }
     else{//change here
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         n.f5.accept(this, argu);
         return _ret;

     }
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public R visit(ExpressionList n, A argu) {
      if(storing ==1 ){
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         return _ret;         
      }
      else{//chagne here
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         return _ret;         

      }
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public R visit(ExpressionRest n, A argu) {
      if(storing ==1 ){
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         return _ret;

      }
      else{//change here
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         return _ret;

      }
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public R visit(PrimaryExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      if(storing == 1){
         R _ret= n.f0.accept(this, argu);
         return _ret;
      }
      else{
         R _ret=(R)"int";
         n.f0.accept(this,argu);
         return _ret;
      }
      
   }

   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n, A argu) {
      if(storing ==1 ){
         R _ret=null;
         n.f0.accept(this, argu);
         return _ret;

      }
      else{
         R _ret=(R)"boolean";
         n.f0.accept(this, argu);
         return _ret;

      }
   }

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n, A argu) {
      if(storing ==1 ){
         R _ret=null;
         n.f0.accept(this, argu);
         return _ret;

      }
      else{
         R _ret=(R)"boolean";
         n.f0.accept(this, argu);
         return _ret;

      }
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n, A argu) {
      if(storing ==1 ){
      R _ret=(R)n.f0.toString();
      // System.err.println("Printing ret type in identifier: "+_ret);
      return _ret;
      }
      else{
         R _ret=(R)n.f0.toString();
         // System.err.println("Printing ret type in identifier: "+_ret);
         return _ret;
      }
      
   }

   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n, A argu) {
      if(storing == 1 )
      {
         R _ret=null;
         n.f0.accept(this, argu);
         return _ret;
      }
      else{//change here 
         R _ret=null;
         n.f0.accept(this, argu);
         return _ret;
      }
      
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public R visit(ArrayAllocationExpression n, A argu) {
      if(storing ==1 ){
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         return _ret;
      }
      else{//change here
         R _ret=(R)"int";

         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         return _ret;
      }
      
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n, A argu) {
      if(storing == 1){
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         return _ret;
      }
      else{//change here
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         return _ret;
      }
      
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public R visit(NotExpression n, A argu) {
      if(storing == 1 ){
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         return _ret;
      }
      else{
         R _ret=(R)"boolean";
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         return _ret;
      }
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public R visit(BracketExpression n, A argu) {
      if(storing == 1){
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         return _ret;
      }
      else{//change here
         R _ret=null;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         return _ret;
      }
   }

   /**
    * f0 -> Identifier()
    * f1 -> ( IdentifierRest() )*
    */
   public R visit(IdentifierList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
   public R visit(IdentifierRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

}
